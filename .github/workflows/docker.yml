on:
  push:
    branches: [main]

env:
  GHCR_REPO: ghcr.io/${{ github.actor }}/imgbot
  GHCR_REPO_SERVER: ghcr.io/${{ github.actor }}/imgbot-server

jobs:
  push_server:
    name: Push to Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Get package version
        id: package_version
        run: |-
          git fetch --tags
          VER=$(git tag --sort="-v:refname" | head -n 1 | cut -d"v" -f2)
          echo ::set-output name=result::${VER}
          echo ::set-output name=image::${GHCR_REPO}:${VER}
          echo ::set-output name=image_latest::${GHCR_REPO}:latest
          echo ::set-output name=image_server::${GHCR_REPO_SERVER}:${VER}
          echo ::set-output name=image_server_latest::${GHCR_REPO_SERVER}:latest

      - name: Determine if duplicated
        id: is_duplicated
        run: |
          IMGBOT_VERSION=${{ steps.package_version.outputs.result }}
          IMGBOT_IMAGE=$GHCR_REPO:$IMGBOT_VERSION
          if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $IMGBOT_IMAGE >/dev/null; then
            echo "There is already a pushed image for v${IMGBOT_VERSION}. Skipping."
            echo ::set-output name=result::true
          else
            echo ::set-output name=result::false
          fi

      - name: Build bot image
        if: ${{ steps.is_duplicated.outputs.result == 'false' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.bot
          push: true
          tags: |
            ${{ steps.package_version.outputs.image }}
            ${{ steps.package_version.outputs.image_latest }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build server image
        if: ${{ steps.is_duplicated.outputs.result == 'false' }}
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.server
          push: true
          tags: |
            ${{ steps.package_version.outputs.image_server }}
            ${{ steps.package_version.outputs.image_server_latest }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        if: ${{ steps.is_duplicated.outputs.result == 'false' }}
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache